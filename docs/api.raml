#%RAML 1.0
title: DPV API
description: API to get data about DPV
version: '1.0'
baseUri: http://localhost:8080/dpv/
mediaType: application/json
types:
  User: !include types/User.raml
securitySchemes:
  basicAuth:
    type: Basic Authentication

/users:
  post:
    description: Register a new user
    body:
      application/json:
        type: object
        properties:
          email: string
          password: string
          name: string
          vorname: string
    responses:
      201:
        description: User created
        body:
          application/json:
            type: User
  /me:
    get:
      description: Get the current authenticated user
      securedBy: [ basicAuth ]
      responses:
        200:
          description: Current user details
          body:
            application/json:
              type: User
  /request-email-validation:
    post:
      description: Request a validation email for the user's email address. Requires authentication.
      securedBy: [ basicAuth ]
      body:
        application/json:
          type: object
          properties:
            email:
              type: string
              required: false
              description: Optional. If provided, sends validation to this email; otherwise uses user's current email.
      responses:
        200:
          description: Validation email sent
          body:
            application/json:
              type: object
              properties:
                message: string
        400:
          description: Bad request (missing/invalid data)
          body:
            application/json:
              type: object
              properties:
                error: string
  /validate-email:
    get:
      description: Validate a user's email address using query parameters from the validation link.
      queryParameters:
        key:
          type: string
          required: true
          description: User key
        expiry:
          type: string
          required: true
          description: Expiry timestamp
        email:
          type: string
          required: true
          description: Email address to validate
        token:
          type: string
          required: true
          description: Validation token
      responses:
        200:
          description: Email successfully validated (returns HTML)
          body:
            text/html:
              example: |
                <!DOCTYPE html>
                <html lang="de">
                <head>
                  <meta charset="UTF-8">
                  <title>E-Mail best√§tigt - DPV</title>
                </head>
                <body>
                  <h1>‚úÖ E-Mail-Adresse erfolgreich best√§tigt!</h1>
                </body>
                </html>
        400:
          description: Bad request (missing/invalid parameters)
          body:
            application/json:
              type: object
              properties:
                error: string
  /request-password-reset:
    post:
      description: Request a password reset email for the given email address.
      body:
        application/json:
          type: object
          properties:
            email:
              type: string
              required: true
              description: The email address to send the password reset link to.
      responses:
        200:
          description: Password reset email sent
          body:
            application/json:
              type: object
              properties:
                message: string
        400:
          description: Bad request (missing/invalid data)
          body:
            application/json:
              type: object
              properties:
                error: string
  /reset-password:
    get:
      description: Show password reset HTML form. Query parameters are passed from the email link.
      queryParameters:
        key:
          type: string
          required: true
          description: User key
        expiry:
          type: string
          required: true
          description: Expiry timestamp
        token:
          type: string
          required: true
          description: Password reset token
      responses:
        200:
          description: Password reset form (HTML with JavaScript for JSON POST)
          body:
            text/html:
              example: |
                <!DOCTYPE html>
                <html lang="de">
                <head>
                  <meta charset="UTF-8">
                  <title>Passwort zur√ºcksetzen - DPV</title>
                </head>
                <body>
                  <h1>üîí Passwort zur√ºcksetzen</h1>
                  <form id="resetForm">
                    <input type="hidden" id="key" value="...">
                    <input type="hidden" id="expiry" value="...">
                    <input type="hidden" id="token" value="...">
                    <label for="password">Neues Passwort:</label>
                    <input type="password" id="password" required>
                    <label for="confirm">Passwort best√§tigen:</label>
                    <input type="password" id="confirm" required>
                    <button type="submit">Passwort √§ndern</button>
                  </form>
                  <div id="result"></div>
                  <script>
                    document.getElementById('resetForm').onsubmit = async function(e) {
                      e.preventDefault();
                      const key = document.getElementById('key').value;
                      const expiry = document.getElementById('expiry').value;
                      const token = document.getElementById('token').value;
                      const password = document.getElementById('password').value;
                      const confirm = document.getElementById('confirm').value;
                      const resultDiv = document.getElementById('result');
                      resultDiv.textContent = '';
                      const resp = await fetch(window.location.pathname + window.location.search, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ key, expiry, token, password, confirm })
                      });
                      const data = await resp.json();
                      if (resp.ok) {
                        resultDiv.textContent = '‚úÖ Passwort erfolgreich ge√§ndert!';
                      } else {
                        resultDiv.textContent = 'Fehler: ' + (data.error || 'Unbekannter Fehler');
                      }
                    };
                  </script>
                </body>
                </html>
        400:
          description: Bad request (missing/invalid parameters)
          body:
            application/json:
              type: object
              properties:
                error: string
    post:
      description: Handle password reset. Expects all variables as JSON in POST body.
      body:
        application/json:
          type: object
          properties:
            key:
              type: string
              required: true
            expiry:
              type: string
              required: true
            token:
              type: string
              required: true
            password:
              type: string
              required: true
            confirm:
              type: string
              required: true
      responses:
        200:
          description: Password successfully changed (returns JSON)
          body:
            application/json:
              type: object
              properties:
                message: string
        400:
          description: Bad request (missing/invalid parameters or passwords do not match)
          body:
            application/json:
              type: object
              properties:
                error: string
/version:
  get:
    description: Returns the version of the API - the only endpoint that does not use JSON-formatted response, i.e. no quotes around version string
    responses:
      '200':
        description: OK
        body:
          type: string
          example: "42"